package com.example.pennywise.chatNetwork

import com.example.pennywise.chatNetwork.dto.apiRespone.ApiResponse
import com.example.pennywise.chatNetwork.dto.apiRespone.result.ExpenseResult
import com.google.gson.Gson
import com.google.gson.JsonElement
import com.google.gson.reflect.TypeToken

import com.google.gson.JsonParser
import com.google.gson.stream.JsonReader
import java.io.StringReader

object GetData
{
    fun getStatus(json: String): String {
        return try {

            // üí° D√πng Regex ƒë·ªÉ l·ªçc JSON th·∫≠t s·ª±
            val jsonCleaned = json.replace(Regex("^```json|```$"), "").trim()

            // D√πng JsonReader ƒë·ªÉ cho ph√©p JSON b·ªã l·ªói nh·∫π
            val reader = JsonReader(StringReader(jsonCleaned))
            reader.isLenient = true

            // Parse JSON
            val jsonElement: JsonElement = JsonParser().parse(reader)
            val jsonObject = jsonElement.asJsonObject

            // L·∫•y status
            val status = jsonObject["status"]?.takeIf { !it.isJsonNull }?.asString ?: "Unknown Status"
            status
        } catch (e: Exception) {
            println("Error parsing JSON in getStatus: ${e.message}")
            "Parsing Error"
        }
    }


    fun getExpenseApi(json: String): ApiResponse<List<ExpenseResult>> {
        val gson = Gson()
        return try {
            // L√†m s·∫°ch chu·ªói JSON n·∫øu c√≥ k√Ω t·ª± th·ª´a nh∆∞ d·∫•u backticks (```)
            val cleanJson = json.replace("```json", "").replace("```", "").trim()

            // Ki·ªÉm tra xem JSON c√≥ ph·∫£i l√† m·ªôt ƒë·ªëi t∆∞·ª£ng h·ª£p l·ªá kh√¥ng
            if (cleanJson.startsWith("{") && cleanJson.endsWith("}")) {
                // S·ª≠ d·ª•ng TypeToken ƒë·ªÉ √°nh x·∫° JSON sang ApiResponse v·ªõi ki·ªÉu generic
                val type = object : TypeToken<ApiResponse<List<ExpenseResult>>>() {}.type
                gson.fromJson(cleanJson, type)
            } else {
                // Tr∆∞·ªùng h·ª£p JSON kh√¥ng ph·∫£i l√† ƒë·ªëi t∆∞·ª£ng, in l·ªói v√† tr·∫£ v·ªÅ ApiResponse m·∫∑c ƒë·ªãnh
                println("Received JSON is not an object: $cleanJson")
                ApiResponse(status = "Error", result = emptyList(), messages = "Invalid JSON format")
            }
        } catch (e: Exception) {
            // In th√¥ng b√°o l·ªói v√† tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói
            println("Error parsing JSON in getExpenseApi: ${e.message}")
            ApiResponse(status = "Error", result = emptyList(), messages = "Parsing Error")
        }
    }




}


